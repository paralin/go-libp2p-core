// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0-devel
// 	protoc        v3.19.3
// source: github.com/libp2p/go-libp2p-core/introspection/pb/introspection.proto

package pb

import (
	reflect "reflect"
	sync "sync"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The status of a connection or stream.
type Status int32

const (
	Status_ACTIVE  Status = 0
	Status_CLOSED  Status = 1
	Status_OPENING Status = 2
	Status_CLOSING Status = 3
	Status_ERROR   Status = 4
)

// Enum value maps for Status.
var (
	Status_name = map[int32]string{
		0: "ACTIVE",
		1: "CLOSED",
		2: "OPENING",
		3: "CLOSING",
		4: "ERROR",
	}
	Status_value = map[string]int32{
		"ACTIVE":  0,
		"CLOSED":  1,
		"OPENING": 2,
		"CLOSING": 3,
		"ERROR":   4,
	}
)

func (x Status) Enum() *Status {
	p := new(Status)
	*p = x
	return p
}

func (x Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Status) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_enumTypes[0].Descriptor()
}

func (Status) Type() protoreflect.EnumType {
	return &file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_enumTypes[0]
}

func (x Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Status.Descriptor instead.
func (Status) EnumDescriptor() ([]byte, []int) {
	return file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_rawDescGZIP(), []int{0}
}

// Our role in a connection or stream.
type Role int32

const (
	Role_INITIATOR Role = 0
	Role_RESPONDER Role = 1
)

// Enum value maps for Role.
var (
	Role_name = map[int32]string{
		0: "INITIATOR",
		1: "RESPONDER",
	}
	Role_value = map[string]int32{
		"INITIATOR": 0,
		"RESPONDER": 1,
	}
)

func (x Role) Enum() *Role {
	p := new(Role)
	*p = x
	return p
}

func (x Role) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Role) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_enumTypes[1].Descriptor()
}

func (Role) Type() protoreflect.EnumType {
	return &file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_enumTypes[1]
}

func (x Role) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Role.Descriptor instead.
func (Role) EnumDescriptor() ([]byte, []int) {
	return file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_rawDescGZIP(), []int{1}
}

// tells client how to sort, filter or display known content properties
type EventType_EventProperty_PropertyType int32

const (
	// for properties to treat as a simple primitive
	EventType_EventProperty_STRING EventType_EventProperty_PropertyType = 0 // default
	EventType_EventProperty_NUMBER EventType_EventProperty_PropertyType = 1
	// for properties with special human-readable formatting
	EventType_EventProperty_TIME      EventType_EventProperty_PropertyType = 10
	EventType_EventProperty_PEERID    EventType_EventProperty_PropertyType = 11
	EventType_EventProperty_MULTIADDR EventType_EventProperty_PropertyType = 12
	// for complex structures like nested arrays, object trees etc
	EventType_EventProperty_JSON EventType_EventProperty_PropertyType = 90
)

// Enum value maps for EventType_EventProperty_PropertyType.
var (
	EventType_EventProperty_PropertyType_name = map[int32]string{
		0:  "STRING",
		1:  "NUMBER",
		10: "TIME",
		11: "PEERID",
		12: "MULTIADDR",
		90: "JSON",
	}
	EventType_EventProperty_PropertyType_value = map[string]int32{
		"STRING":    0,
		"NUMBER":    1,
		"TIME":      10,
		"PEERID":    11,
		"MULTIADDR": 12,
		"JSON":      90,
	}
)

func (x EventType_EventProperty_PropertyType) Enum() *EventType_EventProperty_PropertyType {
	p := new(EventType_EventProperty_PropertyType)
	*p = x
	return p
}

func (x EventType_EventProperty_PropertyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventType_EventProperty_PropertyType) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_enumTypes[2].Descriptor()
}

func (EventType_EventProperty_PropertyType) Type() protoreflect.EnumType {
	return &file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_enumTypes[2]
}

func (x EventType_EventProperty_PropertyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EventType_EventProperty_PropertyType.Descriptor instead.
func (EventType_EventProperty_PropertyType) EnumDescriptor() ([]byte, []int) {
	return file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_rawDescGZIP(), []int{4, 0, 0}
}

// The DHT's relationship with this peer
type DHT_PeerInDHT_Status int32

const (
	// Connected, in a bucket, ready to send/receive queries
	DHT_PeerInDHT_ACTIVE DHT_PeerInDHT_Status = 0
	// Not currently connected, still "in" a bucket (e.g. temporarily disconnected)
	DHT_PeerInDHT_MISSING DHT_PeerInDHT_Status = 1
	// Removed from a bucket or candidate list (e.g. connection lost or too slow)
	DHT_PeerInDHT_REJECTED DHT_PeerInDHT_Status = 2
	// Was reachable when last checked, waiting to join a currently-full bucket
	DHT_PeerInDHT_CANDIDATE DHT_PeerInDHT_Status = 3
)

// Enum value maps for DHT_PeerInDHT_Status.
var (
	DHT_PeerInDHT_Status_name = map[int32]string{
		0: "ACTIVE",
		1: "MISSING",
		2: "REJECTED",
		3: "CANDIDATE",
	}
	DHT_PeerInDHT_Status_value = map[string]int32{
		"ACTIVE":    0,
		"MISSING":   1,
		"REJECTED":  2,
		"CANDIDATE": 3,
	}
)

func (x DHT_PeerInDHT_Status) Enum() *DHT_PeerInDHT_Status {
	p := new(DHT_PeerInDHT_Status)
	*p = x
	return p
}

func (x DHT_PeerInDHT_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DHT_PeerInDHT_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_enumTypes[3].Descriptor()
}

func (DHT_PeerInDHT_Status) Type() protoreflect.EnumType {
	return &file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_enumTypes[3]
}

func (x DHT_PeerInDHT_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DHT_PeerInDHT_Status.Descriptor instead.
func (DHT_PeerInDHT_Status) EnumDescriptor() ([]byte, []int) {
	return file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_rawDescGZIP(), []int{11, 1, 0}
}

type ClientCommand_Source int32

const (
	ClientCommand_STATE   ClientCommand_Source = 0 // full state snapshot.
	ClientCommand_RUNTIME ClientCommand_Source = 1 // runtime data message.
	ClientCommand_EVENTS  ClientCommand_Source = 2 // eventbus events.
)

// Enum value maps for ClientCommand_Source.
var (
	ClientCommand_Source_name = map[int32]string{
		0: "STATE",
		1: "RUNTIME",
		2: "EVENTS",
	}
	ClientCommand_Source_value = map[string]int32{
		"STATE":   0,
		"RUNTIME": 1,
		"EVENTS":  2,
	}
)

func (x ClientCommand_Source) Enum() *ClientCommand_Source {
	p := new(ClientCommand_Source)
	*p = x
	return p
}

func (x ClientCommand_Source) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClientCommand_Source) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_enumTypes[4].Descriptor()
}

func (ClientCommand_Source) Type() protoreflect.EnumType {
	return &file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_enumTypes[4]
}

func (x ClientCommand_Source) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClientCommand_Source.Descriptor instead.
func (ClientCommand_Source) EnumDescriptor() ([]byte, []int) {
	return file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_rawDescGZIP(), []int{17, 0}
}

type ClientCommand_Command int32

const (
	// HELLO is the first command that a client must send to greet the server.
	// Connections that do not respect this invariant will be terminated.
	ClientCommand_HELLO ClientCommand_Command = 0
	// REQUEST is applicable to STATE and RUNTIME sources.
	ClientCommand_REQUEST ClientCommand_Command = 1
	// PUSH streams can only be started for STATE and EVENTS sources.
	ClientCommand_PUSH_ENABLE  ClientCommand_Command = 2 // enables pushing for a given source.
	ClientCommand_PUSH_DISABLE ClientCommand_Command = 3 // disables pushing for a given source.
	ClientCommand_PUSH_PAUSE   ClientCommand_Command = 4 // pauses pushing for all sources.
	ClientCommand_PUSH_RESUME  ClientCommand_Command = 5 // resumes pushing for all sources.
	// UPDATE_CONFIG requests a configuration update. The config field is
	// compulsory.
	//
	// The server reserves the right to override the requested values, and
	// will return the effective configuration in the response.
	ClientCommand_UPDATE_CONFIG ClientCommand_Command = 7
)

// Enum value maps for ClientCommand_Command.
var (
	ClientCommand_Command_name = map[int32]string{
		0: "HELLO",
		1: "REQUEST",
		2: "PUSH_ENABLE",
		3: "PUSH_DISABLE",
		4: "PUSH_PAUSE",
		5: "PUSH_RESUME",
		7: "UPDATE_CONFIG",
	}
	ClientCommand_Command_value = map[string]int32{
		"HELLO":         0,
		"REQUEST":       1,
		"PUSH_ENABLE":   2,
		"PUSH_DISABLE":  3,
		"PUSH_PAUSE":    4,
		"PUSH_RESUME":   5,
		"UPDATE_CONFIG": 7,
	}
)

func (x ClientCommand_Command) Enum() *ClientCommand_Command {
	p := new(ClientCommand_Command)
	*p = x
	return p
}

func (x ClientCommand_Command) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClientCommand_Command) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_enumTypes[5].Descriptor()
}

func (ClientCommand_Command) Type() protoreflect.EnumType {
	return &file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_enumTypes[5]
}

func (x ClientCommand_Command) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClientCommand_Command.Descriptor instead.
func (ClientCommand_Command) EnumDescriptor() ([]byte, []int) {
	return file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_rawDescGZIP(), []int{17, 1}
}

type CommandResponse_Result int32

const (
	CommandResponse_OK  CommandResponse_Result = 0
	CommandResponse_ERR CommandResponse_Result = 1
)

// Enum value maps for CommandResponse_Result.
var (
	CommandResponse_Result_name = map[int32]string{
		0: "OK",
		1: "ERR",
	}
	CommandResponse_Result_value = map[string]int32{
		"OK":  0,
		"ERR": 1,
	}
)

func (x CommandResponse_Result) Enum() *CommandResponse_Result {
	p := new(CommandResponse_Result)
	*p = x
	return p
}

func (x CommandResponse_Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CommandResponse_Result) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_enumTypes[6].Descriptor()
}

func (CommandResponse_Result) Type() protoreflect.EnumType {
	return &file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_enumTypes[6]
}

func (x CommandResponse_Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CommandResponse_Result.Descriptor instead.
func (CommandResponse_Result) EnumDescriptor() ([]byte, []int) {
	return file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_rawDescGZIP(), []int{18, 0}
}

type ServerNotice_Kind int32

const (
	ServerNotice_DISCARDING_EVENTS ServerNotice_Kind = 0
)

// Enum value maps for ServerNotice_Kind.
var (
	ServerNotice_Kind_name = map[int32]string{
		0: "DISCARDING_EVENTS",
	}
	ServerNotice_Kind_value = map[string]int32{
		"DISCARDING_EVENTS": 0,
	}
)

func (x ServerNotice_Kind) Enum() *ServerNotice_Kind {
	p := new(ServerNotice_Kind)
	*p = x
	return p
}

func (x ServerNotice_Kind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ServerNotice_Kind) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_enumTypes[7].Descriptor()
}

func (ServerNotice_Kind) Type() protoreflect.EnumType {
	return &file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_enumTypes[7]
}

func (x ServerNotice_Kind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ServerNotice_Kind.Descriptor instead.
func (ServerNotice_Kind) EnumDescriptor() ([]byte, []int) {
	return file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_rawDescGZIP(), []int{19, 0}
}

// Version of schema
type Version struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version uint32 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *Version) Reset() {
	*x = Version{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Version) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Version) ProtoMessage() {}

func (x *Version) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Version.ProtoReflect.Descriptor instead.
func (*Version) Descriptor() ([]byte, []int) {
	return file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_rawDescGZIP(), []int{0}
}

func (x *Version) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

// ResultCounter is a monotonically increasing counter that reports an ok/err breakdown of the total.
type ResultCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total uint32 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Ok    uint32 `protobuf:"varint,2,opt,name=ok,proto3" json:"ok,omitempty"`
	Err   uint32 `protobuf:"varint,3,opt,name=err,proto3" json:"err,omitempty"`
}

func (x *ResultCounter) Reset() {
	*x = ResultCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResultCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResultCounter) ProtoMessage() {}

func (x *ResultCounter) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResultCounter.ProtoReflect.Descriptor instead.
func (*ResultCounter) Descriptor() ([]byte, []int) {
	return file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_rawDescGZIP(), []int{1}
}

func (x *ResultCounter) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ResultCounter) GetOk() uint32 {
	if x != nil {
		return x.Ok
	}
	return 0
}

func (x *ResultCounter) GetErr() uint32 {
	if x != nil {
		return x.Err
	}
	return 0
}

// Moving totals over sliding time windows. Models sensible time windows,
// we don't have to populate them all at once.
//
// Graphical example:
//
// time     past -> present                              an event 16 min ago
// ======================================================X================>>
//                                                       |               | 1m
//                                                       |           |---| 5m
//                                                       | |-------------| 15m
//                                          |------------X---------------| 30m
//            |------------------------------------------X---------------| 60m
type SlidingCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Over_1M   uint32 `protobuf:"varint,1,opt,name=over_1m,json=over1m,proto3" json:"over_1m,omitempty"`
	Over_5M   uint32 `protobuf:"varint,2,opt,name=over_5m,json=over5m,proto3" json:"over_5m,omitempty"`
	Over_15M  uint32 `protobuf:"varint,3,opt,name=over_15m,json=over15m,proto3" json:"over_15m,omitempty"`
	Over_30M  uint32 `protobuf:"varint,4,opt,name=over_30m,json=over30m,proto3" json:"over_30m,omitempty"`
	Over_1Hr  uint32 `protobuf:"varint,5,opt,name=over_1hr,json=over1hr,proto3" json:"over_1hr,omitempty"`
	Over_2Hr  uint32 `protobuf:"varint,6,opt,name=over_2hr,json=over2hr,proto3" json:"over_2hr,omitempty"`
	Over_4Hr  uint32 `protobuf:"varint,7,opt,name=over_4hr,json=over4hr,proto3" json:"over_4hr,omitempty"`
	Over_8Hr  uint32 `protobuf:"varint,8,opt,name=over_8hr,json=over8hr,proto3" json:"over_8hr,omitempty"`
	Over_12Hr uint32 `protobuf:"varint,9,opt,name=over_12hr,json=over12hr,proto3" json:"over_12hr,omitempty"`
	Over_24Hr uint32 `protobuf:"varint,10,opt,name=over_24hr,json=over24hr,proto3" json:"over_24hr,omitempty"`
}

func (x *SlidingCounter) Reset() {
	*x = SlidingCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SlidingCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SlidingCounter) ProtoMessage() {}

func (x *SlidingCounter) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SlidingCounter.ProtoReflect.Descriptor instead.
func (*SlidingCounter) Descriptor() ([]byte, []int) {
	return file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_rawDescGZIP(), []int{2}
}

func (x *SlidingCounter) GetOver_1M() uint32 {
	if x != nil {
		return x.Over_1M
	}
	return 0
}

func (x *SlidingCounter) GetOver_5M() uint32 {
	if x != nil {
		return x.Over_5M
	}
	return 0
}

func (x *SlidingCounter) GetOver_15M() uint32 {
	if x != nil {
		return x.Over_15M
	}
	return 0
}

func (x *SlidingCounter) GetOver_30M() uint32 {
	if x != nil {
		return x.Over_30M
	}
	return 0
}

func (x *SlidingCounter) GetOver_1Hr() uint32 {
	if x != nil {
		return x.Over_1Hr
	}
	return 0
}

func (x *SlidingCounter) GetOver_2Hr() uint32 {
	if x != nil {
		return x.Over_2Hr
	}
	return 0
}

func (x *SlidingCounter) GetOver_4Hr() uint32 {
	if x != nil {
		return x.Over_4Hr
	}
	return 0
}

func (x *SlidingCounter) GetOver_8Hr() uint32 {
	if x != nil {
		return x.Over_8Hr
	}
	return 0
}

func (x *SlidingCounter) GetOver_12Hr() uint32 {
	if x != nil {
		return x.Over_12Hr
	}
	return 0
}

func (x *SlidingCounter) GetOver_24Hr() uint32 {
	if x != nil {
		return x.Over_24Hr
	}
	return 0
}

// DataGauge reports stats for data traffic in a given direction.
type DataGauge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Cumulative bytes.
	CumBytes uint64 `protobuf:"varint,1,opt,name=cum_bytes,json=cumBytes,proto3" json:"cum_bytes,omitempty"`
	// Cumulative packets.
	CumPackets uint64 `protobuf:"varint,2,opt,name=cum_packets,json=cumPackets,proto3" json:"cum_packets,omitempty"`
	// Instantaneous bandwidth measurement (bytes/second).
	InstBw uint64 `protobuf:"varint,3,opt,name=inst_bw,json=instBw,proto3" json:"inst_bw,omitempty"`
}

func (x *DataGauge) Reset() {
	*x = DataGauge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataGauge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataGauge) ProtoMessage() {}

func (x *DataGauge) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataGauge.ProtoReflect.Descriptor instead.
func (*DataGauge) Descriptor() ([]byte, []int) {
	return file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_rawDescGZIP(), []int{3}
}

func (x *DataGauge) GetCumBytes() uint64 {
	if x != nil {
		return x.CumBytes
	}
	return 0
}

func (x *DataGauge) GetCumPackets() uint64 {
	if x != nil {
		return x.CumPackets
	}
	return 0
}

func (x *DataGauge) GetInstBw() uint64 {
	if x != nil {
		return x.InstBw
	}
	return 0
}

// describes a type of event
type EventType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name of event type, e.g. PeerConnecting
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// for runtime, send property_types for all events already seen in events list
	// for events, only send property_types in the first event of a type not in runtime
	PropertyTypes []*EventType_EventProperty `protobuf:"bytes,2,rep,name=property_types,json=propertyTypes,proto3" json:"property_types,omitempty"`
}

func (x *EventType) Reset() {
	*x = EventType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventType) ProtoMessage() {}

func (x *EventType) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventType.ProtoReflect.Descriptor instead.
func (*EventType) Descriptor() ([]byte, []int) {
	return file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_rawDescGZIP(), []int{4}
}

func (x *EventType) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EventType) GetPropertyTypes() []*EventType_EventProperty {
	if x != nil {
		return x.PropertyTypes
	}
	return nil
}

// Runtime encapsulates runtime info about a node.
type Runtime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// e.g. go-libp2p, js-libp2p, rust-libp2p, etc.
	Implementation string `protobuf:"bytes,1,opt,name=implementation,proto3" json:"implementation,omitempty"`
	// e.g. 1.2.3.
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	// e.g. Windows, Unix, macOS, Chrome, Mozilla, etc.
	Platform string `protobuf:"bytes,3,opt,name=platform,proto3" json:"platform,omitempty"`
	// our peer id - the peer id of the host system
	PeerId string `protobuf:"bytes,4,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
	// metadata describing configured event types
	EventTypes []*EventType `protobuf:"bytes,7,rep,name=event_types,json=eventTypes,proto3" json:"event_types,omitempty"`
}

func (x *Runtime) Reset() {
	*x = Runtime{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Runtime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Runtime) ProtoMessage() {}

func (x *Runtime) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Runtime.ProtoReflect.Descriptor instead.
func (*Runtime) Descriptor() ([]byte, []int) {
	return file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_rawDescGZIP(), []int{5}
}

func (x *Runtime) GetImplementation() string {
	if x != nil {
		return x.Implementation
	}
	return ""
}

func (x *Runtime) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Runtime) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *Runtime) GetPeerId() string {
	if x != nil {
		return x.PeerId
	}
	return ""
}

func (x *Runtime) GetEventTypes() []*EventType {
	if x != nil {
		return x.EventTypes
	}
	return nil
}

// EndpointPair is a pair of multiaddrs.
type EndpointPair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the source multiaddr.
	SrcMultiaddr string `protobuf:"bytes,1,opt,name=src_multiaddr,json=srcMultiaddr,proto3" json:"src_multiaddr,omitempty"`
	// the destination multiaddr.
	DstMultiaddr string `protobuf:"bytes,2,opt,name=dst_multiaddr,json=dstMultiaddr,proto3" json:"dst_multiaddr,omitempty"`
}

func (x *EndpointPair) Reset() {
	*x = EndpointPair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EndpointPair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndpointPair) ProtoMessage() {}

func (x *EndpointPair) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndpointPair.ProtoReflect.Descriptor instead.
func (*EndpointPair) Descriptor() ([]byte, []int) {
	return file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_rawDescGZIP(), []int{6}
}

func (x *EndpointPair) GetSrcMultiaddr() string {
	if x != nil {
		return x.SrcMultiaddr
	}
	return ""
}

func (x *EndpointPair) GetDstMultiaddr() string {
	if x != nil {
		return x.DstMultiaddr
	}
	return ""
}

// Traffic encloses data transfer statistics.
type Traffic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// snapshot of the data in metrics.
	TrafficIn *DataGauge `protobuf:"bytes,1,opt,name=traffic_in,json=trafficIn,proto3" json:"traffic_in,omitempty"`
	// snapshot of the data out metrics.
	TrafficOut *DataGauge `protobuf:"bytes,2,opt,name=traffic_out,json=trafficOut,proto3" json:"traffic_out,omitempty"`
}

func (x *Traffic) Reset() {
	*x = Traffic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Traffic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Traffic) ProtoMessage() {}

func (x *Traffic) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Traffic.ProtoReflect.Descriptor instead.
func (*Traffic) Descriptor() ([]byte, []int) {
	return file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_rawDescGZIP(), []int{7}
}

func (x *Traffic) GetTrafficIn() *DataGauge {
	if x != nil {
		return x.TrafficIn
	}
	return nil
}

func (x *Traffic) GetTrafficOut() *DataGauge {
	if x != nil {
		return x.TrafficOut
	}
	return nil
}

// a list of streams, by reference or inlined.
type StreamList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// NOTE: only one of the next 2 fields can appear, but proto3
	// doesn't support combining oneof and repeated.
	//
	// streams within this connection by reference.
	StreamIds [][]byte `protobuf:"bytes,1,rep,name=stream_ids,json=streamIds,proto3" json:"stream_ids,omitempty"`
	// streams within this connection by inlining.
	Streams []*Stream `protobuf:"bytes,2,rep,name=streams,proto3" json:"streams,omitempty"`
}

func (x *StreamList) Reset() {
	*x = StreamList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamList) ProtoMessage() {}

func (x *StreamList) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamList.ProtoReflect.Descriptor instead.
func (*StreamList) Descriptor() ([]byte, []int) {
	return file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_rawDescGZIP(), []int{8}
}

func (x *StreamList) GetStreamIds() [][]byte {
	if x != nil {
		return x.StreamIds
	}
	return nil
}

func (x *StreamList) GetStreams() []*Stream {
	if x != nil {
		return x.Streams
	}
	return nil
}

// Connection reports metrics and state of a libp2p connection.
type Connection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the id of this connection, not to be shown in user tooling,
	// used for (cross)referencing connections (e.g. relay).
	Id []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// the peer id of the other party.
	PeerId string `protobuf:"bytes,2,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
	// the status of this connection.
	Status Status `protobuf:"varint,3,opt,name=status,proto3,enum=pb.Status" json:"status,omitempty"`
	// a reference to the transport managing this connection.
	TransportId []byte `protobuf:"bytes,4,opt,name=transport_id,json=transportId,proto3" json:"transport_id,omitempty"`
	// the endpoints participating in this connection.
	Endpoints *EndpointPair `protobuf:"bytes,5,opt,name=endpoints,proto3" json:"endpoints,omitempty"`
	// the timeline of the connection, see Connection.Timeline.
	Timeline *Connection_Timeline `protobuf:"bytes,6,opt,name=timeline,proto3" json:"timeline,omitempty"`
	// our role in this connection.
	Role Role `protobuf:"varint,7,opt,name=role,proto3,enum=pb.Role" json:"role,omitempty"`
	// traffic statistics.
	Traffic *Traffic `protobuf:"bytes,8,opt,name=traffic,proto3" json:"traffic,omitempty"`
	// properties of this connection.
	Attribs *Connection_Attributes `protobuf:"bytes,9,opt,name=attribs,proto3" json:"attribs,omitempty"`
	// the instantaneous latency of this connection in nanoseconds.
	LatencyNs uint64 `protobuf:"varint,10,opt,name=latency_ns,json=latencyNs,proto3" json:"latency_ns,omitempty"`
	// streams within this connection.
	Streams *StreamList `protobuf:"bytes,11,opt,name=streams,proto3" json:"streams,omitempty"`
	// if this is a relayed connection, this points to the relaying connection.
	// a default value here (empty bytes) indicates this is not a relayed connection.
	//
	// Types that are assignable to RelayedOver:
	//	*Connection_ConnId
	//	*Connection_Conn
	RelayedOver isConnection_RelayedOver `protobuf_oneof:"relayed_over"`
	// user provided tags.
	UserProvidedTags []string `protobuf:"bytes,99,rep,name=user_provided_tags,json=userProvidedTags,proto3" json:"user_provided_tags,omitempty"`
}

func (x *Connection) Reset() {
	*x = Connection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Connection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Connection) ProtoMessage() {}

func (x *Connection) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Connection.ProtoReflect.Descriptor instead.
func (*Connection) Descriptor() ([]byte, []int) {
	return file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_rawDescGZIP(), []int{9}
}

func (x *Connection) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Connection) GetPeerId() string {
	if x != nil {
		return x.PeerId
	}
	return ""
}

func (x *Connection) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_ACTIVE
}

func (x *Connection) GetTransportId() []byte {
	if x != nil {
		return x.TransportId
	}
	return nil
}

func (x *Connection) GetEndpoints() *EndpointPair {
	if x != nil {
		return x.Endpoints
	}
	return nil
}

func (x *Connection) GetTimeline() *Connection_Timeline {
	if x != nil {
		return x.Timeline
	}
	return nil
}

func (x *Connection) GetRole() Role {
	if x != nil {
		return x.Role
	}
	return Role_INITIATOR
}

func (x *Connection) GetTraffic() *Traffic {
	if x != nil {
		return x.Traffic
	}
	return nil
}

func (x *Connection) GetAttribs() *Connection_Attributes {
	if x != nil {
		return x.Attribs
	}
	return nil
}

func (x *Connection) GetLatencyNs() uint64 {
	if x != nil {
		return x.LatencyNs
	}
	return 0
}

func (x *Connection) GetStreams() *StreamList {
	if x != nil {
		return x.Streams
	}
	return nil
}

func (m *Connection) GetRelayedOver() isConnection_RelayedOver {
	if m != nil {
		return m.RelayedOver
	}
	return nil
}

func (x *Connection) GetConnId() []byte {
	if x, ok := x.GetRelayedOver().(*Connection_ConnId); ok {
		return x.ConnId
	}
	return nil
}

func (x *Connection) GetConn() *Connection {
	if x, ok := x.GetRelayedOver().(*Connection_Conn); ok {
		return x.Conn
	}
	return nil
}

func (x *Connection) GetUserProvidedTags() []string {
	if x != nil {
		return x.UserProvidedTags
	}
	return nil
}

type isConnection_RelayedOver interface {
	isConnection_RelayedOver()
}

type Connection_ConnId struct {
	ConnId []byte `protobuf:"bytes,16,opt,name=conn_id,json=connId,proto3,oneof"`
}

type Connection_Conn struct {
	Conn *Connection `protobuf:"bytes,17,opt,name=conn,proto3,oneof"`
}

func (*Connection_ConnId) isConnection_RelayedOver() {}

func (*Connection_Conn) isConnection_RelayedOver() {}

// Stream reports metrics and state of a libp2p stream.
type Stream struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the id of this stream, not to be shown in user tooling,
	// used for (cross)referencing streams.
	Id []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// the protocol pinned to this stream.
	Protocol string `protobuf:"bytes,2,opt,name=protocol,proto3" json:"protocol,omitempty"`
	// our role in this stream.
	Role Role `protobuf:"varint,3,opt,name=role,proto3,enum=pb.Role" json:"role,omitempty"`
	// traffic statistics.
	Traffic *Traffic `protobuf:"bytes,4,opt,name=traffic,proto3" json:"traffic,omitempty"`
	// the connection this stream is hosted under.
	Conn *Stream_ConnectionRef `protobuf:"bytes,5,opt,name=conn,proto3" json:"conn,omitempty"`
	// the timeline of the stream, see Stream.Timeline.
	Timeline *Stream_Timeline `protobuf:"bytes,6,opt,name=timeline,proto3" json:"timeline,omitempty"`
	// the status of this stream.
	Status Status `protobuf:"varint,7,opt,name=status,proto3,enum=pb.Status" json:"status,omitempty"`
	// the instantaneous latency of this stream in nanoseconds.
	// TODO: this is hard to calculate.
	LatencyNs uint64 `protobuf:"varint,16,opt,name=latency_ns,json=latencyNs,proto3" json:"latency_ns,omitempty"`
	// user provided tags.
	UserProvidedTags []string `protobuf:"bytes,99,rep,name=user_provided_tags,json=userProvidedTags,proto3" json:"user_provided_tags,omitempty"`
}

func (x *Stream) Reset() {
	*x = Stream{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Stream) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stream) ProtoMessage() {}

func (x *Stream) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stream.ProtoReflect.Descriptor instead.
func (*Stream) Descriptor() ([]byte, []int) {
	return file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_rawDescGZIP(), []int{10}
}

func (x *Stream) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Stream) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *Stream) GetRole() Role {
	if x != nil {
		return x.Role
	}
	return Role_INITIATOR
}

func (x *Stream) GetTraffic() *Traffic {
	if x != nil {
		return x.Traffic
	}
	return nil
}

func (x *Stream) GetConn() *Stream_ConnectionRef {
	if x != nil {
		return x.Conn
	}
	return nil
}

func (x *Stream) GetTimeline() *Stream_Timeline {
	if x != nil {
		return x.Timeline
	}
	return nil
}

func (x *Stream) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_ACTIVE
}

func (x *Stream) GetLatencyNs() uint64 {
	if x != nil {
		return x.LatencyNs
	}
	return 0
}

func (x *Stream) GetUserProvidedTags() []string {
	if x != nil {
		return x.UserProvidedTags
	}
	return nil
}

// DHT metrics and state.
type DHT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// DHT protocol name
	Protocol string `protobuf:"bytes,1,opt,name=protocol,proto3" json:"protocol,omitempty"`
	// protocol enabled.
	Enabled bool `protobuf:"varint,2,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// timestamp (ms since epoch) of start up.
	StartTs uint64 `protobuf:"varint,3,opt,name=start_ts,json=startTs,proto3" json:"start_ts,omitempty"`
	// params of the dht.
	Params *DHT_Params `protobuf:"bytes,4,opt,name=params,proto3" json:"params,omitempty"`
	// existing, intantiated buckets and their contents
	Buckets []*DHT_Bucket `protobuf:"bytes,5,rep,name=buckets,proto3" json:"buckets,omitempty"`
	// counts inbound queries received from other peers
	IncomingQueries *DHT_QueryGauge `protobuf:"bytes,6,opt,name=incoming_queries,json=incomingQueries,proto3" json:"incoming_queries,omitempty"`
	// counts outbound queries dispatched by this peer
	OutgoingQueries *DHT_QueryGauge `protobuf:"bytes,7,opt,name=outgoing_queries,json=outgoingQueries,proto3" json:"outgoing_queries,omitempty"`
}

func (x *DHT) Reset() {
	*x = DHT{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DHT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DHT) ProtoMessage() {}

func (x *DHT) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DHT.ProtoReflect.Descriptor instead.
func (*DHT) Descriptor() ([]byte, []int) {
	return file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_rawDescGZIP(), []int{11}
}

func (x *DHT) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *DHT) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *DHT) GetStartTs() uint64 {
	if x != nil {
		return x.StartTs
	}
	return 0
}

func (x *DHT) GetParams() *DHT_Params {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *DHT) GetBuckets() []*DHT_Bucket {
	if x != nil {
		return x.Buckets
	}
	return nil
}

func (x *DHT) GetIncomingQueries() *DHT_QueryGauge {
	if x != nil {
		return x.IncomingQueries
	}
	return nil
}

func (x *DHT) GetOutgoingQueries() *DHT_QueryGauge {
	if x != nil {
		return x.OutgoingQueries
	}
	return nil
}

// Subsystems encapsulates all instrumented subsystems for a libp2p host.
type Subsystems struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// connections data, source agnostic but currently only supports the Swarm subsystem
	Connections []*Connection `protobuf:"bytes,1,rep,name=connections,proto3" json:"connections,omitempty"`
	// the DHT subsystem.
	Dht *DHT `protobuf:"bytes,2,opt,name=dht,proto3" json:"dht,omitempty"`
}

func (x *Subsystems) Reset() {
	*x = Subsystems{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Subsystems) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Subsystems) ProtoMessage() {}

func (x *Subsystems) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Subsystems.ProtoReflect.Descriptor instead.
func (*Subsystems) Descriptor() ([]byte, []int) {
	return file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_rawDescGZIP(), []int{12}
}

func (x *Subsystems) GetConnections() []*Connection {
	if x != nil {
		return x.Connections
	}
	return nil
}

func (x *Subsystems) GetDht() *DHT {
	if x != nil {
		return x.Dht
	}
	return nil
}

// Connections and streams output for a time interval is one of these.
type State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// list of connections
	Subsystems *Subsystems `protobuf:"bytes,1,opt,name=subsystems,proto3" json:"subsystems,omitempty"`
	// overall traffic for this peer
	Traffic *Traffic `protobuf:"bytes,2,opt,name=traffic,proto3" json:"traffic,omitempty"`
	// moment this data snapshot and instantaneous values were taken
	InstantTs uint64 `protobuf:"varint,3,opt,name=instant_ts,json=instantTs,proto3" json:"instant_ts,omitempty"`
	// start of included data collection (cumulative values counted from here)
	StartTs uint64 `protobuf:"varint,4,opt,name=start_ts,json=startTs,proto3" json:"start_ts,omitempty"`
	// length of time up to instant_ts covered by this data snapshot
	SnapshotDurationMs uint32 `protobuf:"varint,5,opt,name=snapshot_duration_ms,json=snapshotDurationMs,proto3" json:"snapshot_duration_ms,omitempty"`
}

func (x *State) Reset() {
	*x = State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*State) ProtoMessage() {}

func (x *State) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use State.ProtoReflect.Descriptor instead.
func (*State) Descriptor() ([]byte, []int) {
	return file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_rawDescGZIP(), []int{13}
}

func (x *State) GetSubsystems() *Subsystems {
	if x != nil {
		return x.Subsystems
	}
	return nil
}

func (x *State) GetTraffic() *Traffic {
	if x != nil {
		return x.Traffic
	}
	return nil
}

func (x *State) GetInstantTs() uint64 {
	if x != nil {
		return x.InstantTs
	}
	return 0
}

func (x *State) GetStartTs() uint64 {
	if x != nil {
		return x.StartTs
	}
	return 0
}

func (x *State) GetSnapshotDurationMs() uint32 {
	if x != nil {
		return x.SnapshotDurationMs
	}
	return 0
}

// Event
type Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// definition of event type, containing only `name` unless this is first encounter of novel event
	Type *EventType `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// time this event occurred (ms since epoch)
	Ts uint64 `protobuf:"varint,2,opt,name=ts,proto3" json:"ts,omitempty"`
	// stringified json; top-level keys and value types match EventProperty definitions
	Content string `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *Event) Reset() {
	*x = Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_rawDescGZIP(), []int{14}
}

func (x *Event) GetType() *EventType {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Event) GetTs() uint64 {
	if x != nil {
		return x.Ts
	}
	return 0
}

func (x *Event) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

// ServerMessage wraps messages to be sent to clients to allow extension
// based on new types of data sources
type ServerMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Version of this protobuf.
	Version *Version `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	// The payload this message contains.
	//
	// Types that are assignable to Payload:
	//	*ServerMessage_State
	//	*ServerMessage_Runtime
	//	*ServerMessage_Event
	//	*ServerMessage_Response
	//	*ServerMessage_Notice
	Payload isServerMessage_Payload `protobuf_oneof:"payload"`
}

func (x *ServerMessage) Reset() {
	*x = ServerMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerMessage) ProtoMessage() {}

func (x *ServerMessage) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerMessage.ProtoReflect.Descriptor instead.
func (*ServerMessage) Descriptor() ([]byte, []int) {
	return file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_rawDescGZIP(), []int{15}
}

func (x *ServerMessage) GetVersion() *Version {
	if x != nil {
		return x.Version
	}
	return nil
}

func (m *ServerMessage) GetPayload() isServerMessage_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *ServerMessage) GetState() *State {
	if x, ok := x.GetPayload().(*ServerMessage_State); ok {
		return x.State
	}
	return nil
}

func (x *ServerMessage) GetRuntime() *Runtime {
	if x, ok := x.GetPayload().(*ServerMessage_Runtime); ok {
		return x.Runtime
	}
	return nil
}

func (x *ServerMessage) GetEvent() *Event {
	if x, ok := x.GetPayload().(*ServerMessage_Event); ok {
		return x.Event
	}
	return nil
}

func (x *ServerMessage) GetResponse() *CommandResponse {
	if x, ok := x.GetPayload().(*ServerMessage_Response); ok {
		return x.Response
	}
	return nil
}

func (x *ServerMessage) GetNotice() *ServerNotice {
	if x, ok := x.GetPayload().(*ServerMessage_Notice); ok {
		return x.Notice
	}
	return nil
}

type isServerMessage_Payload interface {
	isServerMessage_Payload()
}

type ServerMessage_State struct {
	State *State `protobuf:"bytes,2,opt,name=state,proto3,oneof"`
}

type ServerMessage_Runtime struct {
	Runtime *Runtime `protobuf:"bytes,3,opt,name=runtime,proto3,oneof"`
}

type ServerMessage_Event struct {
	Event *Event `protobuf:"bytes,4,opt,name=event,proto3,oneof"`
}

type ServerMessage_Response struct {
	Response *CommandResponse `protobuf:"bytes,5,opt,name=response,proto3,oneof"`
}

type ServerMessage_Notice struct {
	Notice *ServerNotice `protobuf:"bytes,6,opt,name=notice,proto3,oneof"`
}

func (*ServerMessage_State) isServerMessage_Payload() {}

func (*ServerMessage_Runtime) isServerMessage_Payload() {}

func (*ServerMessage_Event) isServerMessage_Payload() {}

func (*ServerMessage_Response) isServerMessage_Payload() {}

func (*ServerMessage_Notice) isServerMessage_Payload() {}

// Configuration encapsulates configuration fields for the protocol and commands.
type Configuration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RetentionPeriodMs       uint64 `protobuf:"varint,1,opt,name=retention_period_ms,json=retentionPeriodMs,proto3" json:"retention_period_ms,omitempty"`
	StateSnapshotIntervalMs uint64 `protobuf:"varint,2,opt,name=state_snapshot_interval_ms,json=stateSnapshotIntervalMs,proto3" json:"state_snapshot_interval_ms,omitempty"`
}

func (x *Configuration) Reset() {
	*x = Configuration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Configuration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Configuration) ProtoMessage() {}

func (x *Configuration) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Configuration.ProtoReflect.Descriptor instead.
func (*Configuration) Descriptor() ([]byte, []int) {
	return file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_rawDescGZIP(), []int{16}
}

func (x *Configuration) GetRetentionPeriodMs() uint64 {
	if x != nil {
		return x.RetentionPeriodMs
	}
	return 0
}

func (x *Configuration) GetStateSnapshotIntervalMs() uint64 {
	if x != nil {
		return x.StateSnapshotIntervalMs
	}
	return 0
}

// ClientCommand is a command sent from the client to the server.
type ClientCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version *Version              `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	Id      uint64                `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"` // a unique ID for this request.
	Command ClientCommand_Command `protobuf:"varint,3,opt,name=command,proto3,enum=pb.ClientCommand_Command" json:"command,omitempty"`
	Source  ClientCommand_Source  `protobuf:"varint,4,opt,name=source,proto3,enum=pb.ClientCommand_Source" json:"source,omitempty"`
	Config  *Configuration        `protobuf:"bytes,5,opt,name=config,proto3" json:"config,omitempty"`
}

func (x *ClientCommand) Reset() {
	*x = ClientCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientCommand) ProtoMessage() {}

func (x *ClientCommand) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientCommand.ProtoReflect.Descriptor instead.
func (*ClientCommand) Descriptor() ([]byte, []int) {
	return file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_rawDescGZIP(), []int{17}
}

func (x *ClientCommand) GetVersion() *Version {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *ClientCommand) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ClientCommand) GetCommand() ClientCommand_Command {
	if x != nil {
		return x.Command
	}
	return ClientCommand_HELLO
}

func (x *ClientCommand) GetSource() ClientCommand_Source {
	if x != nil {
		return x.Source
	}
	return ClientCommand_STATE
}

func (x *ClientCommand) GetConfig() *Configuration {
	if x != nil {
		return x.Config
	}
	return nil
}

// CommandResponse is a response to a command sent by the client.
type CommandResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     uint64                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"` // for correlation with the request.
	Result CommandResponse_Result `protobuf:"varint,2,opt,name=result,proto3,enum=pb.CommandResponse_Result" json:"result,omitempty"`
	Error  string                 `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
	// effective_config is the effective configuration the server holds for
	// this connection. It is returned in response to HELLO and UPDATE_CONFIG
	// commands.
	EffectiveConfig *Configuration `protobuf:"bytes,4,opt,name=effective_config,json=effectiveConfig,proto3" json:"effective_config,omitempty"`
}

func (x *CommandResponse) Reset() {
	*x = CommandResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandResponse) ProtoMessage() {}

func (x *CommandResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandResponse.ProtoReflect.Descriptor instead.
func (*CommandResponse) Descriptor() ([]byte, []int) {
	return file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_rawDescGZIP(), []int{18}
}

func (x *CommandResponse) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CommandResponse) GetResult() CommandResponse_Result {
	if x != nil {
		return x.Result
	}
	return CommandResponse_OK
}

func (x *CommandResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *CommandResponse) GetEffectiveConfig() *Configuration {
	if x != nil {
		return x.EffectiveConfig
	}
	return nil
}

// ServerNotice represents a NOTICE sent from the server to the client.
type ServerNotice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kind ServerNotice_Kind `protobuf:"varint,1,opt,name=kind,proto3,enum=pb.ServerNotice_Kind" json:"kind,omitempty"`
}

func (x *ServerNotice) Reset() {
	*x = ServerNotice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerNotice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerNotice) ProtoMessage() {}

func (x *ServerNotice) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerNotice.ProtoReflect.Descriptor instead.
func (*ServerNotice) Descriptor() ([]byte, []int) {
	return file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_rawDescGZIP(), []int{19}
}

func (x *ServerNotice) GetKind() ServerNotice_Kind {
	if x != nil {
		return x.Kind
	}
	return ServerNotice_DISCARDING_EVENTS
}

// metadata about content types in event's top-level content JSON
type EventType_EventProperty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// property name of content e.g. openTs
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// type to interpret content value as
	Type EventType_EventProperty_PropertyType `protobuf:"varint,2,opt,name=type,proto3,enum=pb.EventType_EventProperty_PropertyType" json:"type,omitempty"`
	// if true, expect an array of values of `type`; else, singular
	HasMultiple bool `protobuf:"varint,3,opt,name=has_multiple,json=hasMultiple,proto3" json:"has_multiple,omitempty"`
}

func (x *EventType_EventProperty) Reset() {
	*x = EventType_EventProperty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventType_EventProperty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventType_EventProperty) ProtoMessage() {}

func (x *EventType_EventProperty) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventType_EventProperty.ProtoReflect.Descriptor instead.
func (*EventType_EventProperty) Descriptor() ([]byte, []int) {
	return file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_rawDescGZIP(), []int{4, 0}
}

func (x *EventType_EventProperty) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EventType_EventProperty) GetType() EventType_EventProperty_PropertyType {
	if x != nil {
		return x.Type
	}
	return EventType_EventProperty_STRING
}

func (x *EventType_EventProperty) GetHasMultiple() bool {
	if x != nil {
		return x.HasMultiple
	}
	return false
}

// Timeline contains the timestamps (ms since epoch) of the well-known milestones of a connection.
type Connection_Timeline struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the instant when a connection was opened on the wire.
	OpenTs uint64 `protobuf:"varint,1,opt,name=open_ts,json=openTs,proto3" json:"open_ts,omitempty"`
	// the instant when the upgrade process (handshake, security, multiplexing) finished.
	UpgradedTs uint64 `protobuf:"varint,2,opt,name=upgraded_ts,json=upgradedTs,proto3" json:"upgraded_ts,omitempty"`
	// the instant when this connection was terminated.
	CloseTs uint64 `protobuf:"varint,3,opt,name=close_ts,json=closeTs,proto3" json:"close_ts,omitempty"`
}

func (x *Connection_Timeline) Reset() {
	*x = Connection_Timeline{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Connection_Timeline) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Connection_Timeline) ProtoMessage() {}

func (x *Connection_Timeline) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Connection_Timeline.ProtoReflect.Descriptor instead.
func (*Connection_Timeline) Descriptor() ([]byte, []int) {
	return file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_rawDescGZIP(), []int{9, 0}
}

func (x *Connection_Timeline) GetOpenTs() uint64 {
	if x != nil {
		return x.OpenTs
	}
	return 0
}

func (x *Connection_Timeline) GetUpgradedTs() uint64 {
	if x != nil {
		return x.UpgradedTs
	}
	return 0
}

func (x *Connection_Timeline) GetCloseTs() uint64 {
	if x != nil {
		return x.CloseTs
	}
	return 0
}

// Attributes encapsulates the attributes of this connection.
type Connection_Attributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the multiplexer being used.
	Multiplexer string `protobuf:"bytes,1,opt,name=multiplexer,proto3" json:"multiplexer,omitempty"`
	// the encryption method being used.
	Encryption string `protobuf:"bytes,2,opt,name=encryption,proto3" json:"encryption,omitempty"`
}

func (x *Connection_Attributes) Reset() {
	*x = Connection_Attributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Connection_Attributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Connection_Attributes) ProtoMessage() {}

func (x *Connection_Attributes) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Connection_Attributes.ProtoReflect.Descriptor instead.
func (*Connection_Attributes) Descriptor() ([]byte, []int) {
	return file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_rawDescGZIP(), []int{9, 1}
}

func (x *Connection_Attributes) GetMultiplexer() string {
	if x != nil {
		return x.Multiplexer
	}
	return ""
}

func (x *Connection_Attributes) GetEncryption() string {
	if x != nil {
		return x.Encryption
	}
	return ""
}

type Stream_ConnectionRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Connection:
	//	*Stream_ConnectionRef_Conn
	//	*Stream_ConnectionRef_ConnId
	Connection isStream_ConnectionRef_Connection `protobuf_oneof:"connection"`
}

func (x *Stream_ConnectionRef) Reset() {
	*x = Stream_ConnectionRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Stream_ConnectionRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stream_ConnectionRef) ProtoMessage() {}

func (x *Stream_ConnectionRef) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stream_ConnectionRef.ProtoReflect.Descriptor instead.
func (*Stream_ConnectionRef) Descriptor() ([]byte, []int) {
	return file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_rawDescGZIP(), []int{10, 0}
}

func (m *Stream_ConnectionRef) GetConnection() isStream_ConnectionRef_Connection {
	if m != nil {
		return m.Connection
	}
	return nil
}

func (x *Stream_ConnectionRef) GetConn() *Connection {
	if x, ok := x.GetConnection().(*Stream_ConnectionRef_Conn); ok {
		return x.Conn
	}
	return nil
}

func (x *Stream_ConnectionRef) GetConnId() []byte {
	if x, ok := x.GetConnection().(*Stream_ConnectionRef_ConnId); ok {
		return x.ConnId
	}
	return nil
}

type isStream_ConnectionRef_Connection interface {
	isStream_ConnectionRef_Connection()
}

type Stream_ConnectionRef_Conn struct {
	// the parent connection inlined.
	Conn *Connection `protobuf:"bytes,1,opt,name=conn,proto3,oneof"`
}

type Stream_ConnectionRef_ConnId struct {
	// the parent connection by reference.
	ConnId []byte `protobuf:"bytes,2,opt,name=conn_id,json=connId,proto3,oneof"`
}

func (*Stream_ConnectionRef_Conn) isStream_ConnectionRef_Connection() {}

func (*Stream_ConnectionRef_ConnId) isStream_ConnectionRef_Connection() {}

// Timeline contains the timestamps (ms since epoch) of the well-known milestones of a stream.
type Stream_Timeline struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the instant when the stream was opened.
	OpenTs uint64 `protobuf:"varint,1,opt,name=open_ts,json=openTs,proto3" json:"open_ts,omitempty"`
	// the instant when the stream was terminated.
	CloseTs uint64 `protobuf:"varint,2,opt,name=close_ts,json=closeTs,proto3" json:"close_ts,omitempty"`
}

func (x *Stream_Timeline) Reset() {
	*x = Stream_Timeline{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Stream_Timeline) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stream_Timeline) ProtoMessage() {}

func (x *Stream_Timeline) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stream_Timeline.ProtoReflect.Descriptor instead.
func (*Stream_Timeline) Descriptor() ([]byte, []int) {
	return file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_rawDescGZIP(), []int{10, 1}
}

func (x *Stream_Timeline) GetOpenTs() uint64 {
	if x != nil {
		return x.OpenTs
	}
	return 0
}

func (x *Stream_Timeline) GetCloseTs() uint64 {
	if x != nil {
		return x.CloseTs
	}
	return 0
}

type DHT_Params struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// routing table bucket size.
	K uint64 `protobuf:"varint,1,opt,name=k,proto3" json:"k,omitempty"`
	// concurrency of asynchronous requests.
	Alpha uint64 `protobuf:"varint,2,opt,name=alpha,proto3" json:"alpha,omitempty"`
	// number of disjoint paths to use.
	DisjointPaths uint64 `protobuf:"varint,3,opt,name=disjoint_paths,json=disjointPaths,proto3" json:"disjoint_paths,omitempty"`
	// number of peers closest to a target that must have responded
	// in order for a given query path to complete
	Beta uint64 `protobuf:"varint,4,opt,name=beta,proto3" json:"beta,omitempty"`
}

func (x *DHT_Params) Reset() {
	*x = DHT_Params{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DHT_Params) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DHT_Params) ProtoMessage() {}

func (x *DHT_Params) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DHT_Params.ProtoReflect.Descriptor instead.
func (*DHT_Params) Descriptor() ([]byte, []int) {
	return file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_rawDescGZIP(), []int{11, 0}
}

func (x *DHT_Params) GetK() uint64 {
	if x != nil {
		return x.K
	}
	return 0
}

func (x *DHT_Params) GetAlpha() uint64 {
	if x != nil {
		return x.Alpha
	}
	return 0
}

func (x *DHT_Params) GetDisjointPaths() uint64 {
	if x != nil {
		return x.DisjointPaths
	}
	return 0
}

func (x *DHT_Params) GetBeta() uint64 {
	if x != nil {
		return x.Beta
	}
	return 0
}

// Peer in DHT
type DHT_PeerInDHT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the peer id of the host system
	PeerId string `protobuf:"bytes,1,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
	// the peer's status when data snapshot is taken
	Status DHT_PeerInDHT_Status `protobuf:"varint,2,opt,name=status,proto3,enum=pb.DHT_PeerInDHT_Status" json:"status,omitempty"`
	// age in bucket (ms)
	AgeInBucket uint32 `protobuf:"varint,3,opt,name=age_in_bucket,json=ageInBucket,proto3" json:"age_in_bucket,omitempty"`
}

func (x *DHT_PeerInDHT) Reset() {
	*x = DHT_PeerInDHT{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DHT_PeerInDHT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DHT_PeerInDHT) ProtoMessage() {}

func (x *DHT_PeerInDHT) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DHT_PeerInDHT.ProtoReflect.Descriptor instead.
func (*DHT_PeerInDHT) Descriptor() ([]byte, []int) {
	return file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_rawDescGZIP(), []int{11, 1}
}

func (x *DHT_PeerInDHT) GetPeerId() string {
	if x != nil {
		return x.PeerId
	}
	return ""
}

func (x *DHT_PeerInDHT) GetStatus() DHT_PeerInDHT_Status {
	if x != nil {
		return x.Status
	}
	return DHT_PeerInDHT_ACTIVE
}

func (x *DHT_PeerInDHT) GetAgeInBucket() uint32 {
	if x != nil {
		return x.AgeInBucket
	}
	return 0
}

// A "k-bucket" containing peers of a certain kadamelia distance
type DHT_Bucket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// CPL (Common Prefix Length) is the length of the common prefix
	// between the ids of every peer in this bucket and the DHT peer id
	Cpl uint32 `protobuf:"varint,1,opt,name=cpl,proto3" json:"cpl,omitempty"`
	// Peers associated with this bucket
	Peers []*DHT_PeerInDHT `protobuf:"bytes,2,rep,name=peers,proto3" json:"peers,omitempty"` // Bucket may need more fields depending on WIP remodeling
}

func (x *DHT_Bucket) Reset() {
	*x = DHT_Bucket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DHT_Bucket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DHT_Bucket) ProtoMessage() {}

func (x *DHT_Bucket) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DHT_Bucket.ProtoReflect.Descriptor instead.
func (*DHT_Bucket) Descriptor() ([]byte, []int) {
	return file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_rawDescGZIP(), []int{11, 2}
}

func (x *DHT_Bucket) GetCpl() uint32 {
	if x != nil {
		return x.Cpl
	}
	return 0
}

func (x *DHT_Bucket) GetPeers() []*DHT_PeerInDHT {
	if x != nil {
		return x.Peers
	}
	return nil
}

// Counters of query events, by status
type DHT_QueryGauge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Cumulative counter of queries with "SUCCESS" status
	Success uint64 `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	// Cumulative counter of queries with "ERROR" status
	Error uint64 `protobuf:"varint,2,opt,name=error,proto3" json:"error,omitempty"`
	// Cumulative counter of queries with "TIMEOUT" status
	Timeout uint64 `protobuf:"varint,3,opt,name=timeout,proto3" json:"timeout,omitempty"`
}

func (x *DHT_QueryGauge) Reset() {
	*x = DHT_QueryGauge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DHT_QueryGauge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DHT_QueryGauge) ProtoMessage() {}

func (x *DHT_QueryGauge) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DHT_QueryGauge.ProtoReflect.Descriptor instead.
func (*DHT_QueryGauge) Descriptor() ([]byte, []int) {
	return file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_rawDescGZIP(), []int{11, 3}
}

func (x *DHT_QueryGauge) GetSuccess() uint64 {
	if x != nil {
		return x.Success
	}
	return 0
}

func (x *DHT_QueryGauge) GetError() uint64 {
	if x != nil {
		return x.Error
	}
	return 0
}

func (x *DHT_QueryGauge) GetTimeout() uint64 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

var File_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto protoreflect.FileDescriptor

var file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_rawDesc = []byte{
	0x0a, 0x45, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6c, 0x69, 0x62,
	0x70, 0x32, 0x70, 0x2f, 0x67, 0x6f, 0x2d, 0x6c, 0x69, 0x62, 0x70, 0x32, 0x70, 0x2d, 0x63, 0x6f,
	0x72, 0x65, 0x2f, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x70, 0x62, 0x2f, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x70, 0x62, 0x22, 0x23, 0x0a, 0x07, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x22, 0x47, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x6b, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x02, 0x6f, 0x6b, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x65, 0x72, 0x72, 0x22, 0x9e, 0x02, 0x0a, 0x0e, 0x53, 0x6c,
	0x69, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x07,
	0x6f, 0x76, 0x65, 0x72, 0x5f, 0x31, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6f,
	0x76, 0x65, 0x72, 0x31, 0x6d, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x35, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6f, 0x76, 0x65, 0x72, 0x35, 0x6d, 0x12, 0x19,
	0x0a, 0x08, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x31, 0x35, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x6f, 0x76, 0x65, 0x72, 0x31, 0x35, 0x6d, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x76, 0x65,
	0x72, 0x5f, 0x33, 0x30, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6f, 0x76, 0x65,
	0x72, 0x33, 0x30, 0x6d, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x31, 0x68, 0x72,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6f, 0x76, 0x65, 0x72, 0x31, 0x68, 0x72, 0x12,
	0x19, 0x0a, 0x08, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x32, 0x68, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x6f, 0x76, 0x65, 0x72, 0x32, 0x68, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x76,
	0x65, 0x72, 0x5f, 0x34, 0x68, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6f, 0x76,
	0x65, 0x72, 0x34, 0x68, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x38, 0x68,
	0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6f, 0x76, 0x65, 0x72, 0x38, 0x68, 0x72,
	0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x31, 0x32, 0x68, 0x72, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x6f, 0x76, 0x65, 0x72, 0x31, 0x32, 0x68, 0x72, 0x12, 0x1b, 0x0a,
	0x09, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x32, 0x34, 0x68, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x6f, 0x76, 0x65, 0x72, 0x32, 0x34, 0x68, 0x72, 0x22, 0x62, 0x0a, 0x09, 0x44, 0x61,
	0x74, 0x61, 0x47, 0x61, 0x75, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x75, 0x6d, 0x5f, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x63, 0x75, 0x6d, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x6d, 0x5f, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x63, 0x75, 0x6d, 0x50, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x5f, 0x62, 0x77,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x69, 0x6e, 0x73, 0x74, 0x42, 0x77, 0x22, 0xc1,
	0x02, 0x0a, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x42, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x62, 0x2e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x1a, 0xdb, 0x01, 0x0a, 0x0d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x70, 0x62, 0x2e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x79, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x68, 0x61, 0x73, 0x5f,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b,
	0x68, 0x61, 0x73, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x22, 0x55, 0x0a, 0x0c, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x53,
	0x54, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x55, 0x4d, 0x42, 0x45,
	0x52, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x0a, 0x12, 0x0a, 0x0a,
	0x06, 0x50, 0x45, 0x45, 0x52, 0x49, 0x44, 0x10, 0x0b, 0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x55, 0x4c,
	0x54, 0x49, 0x41, 0x44, 0x44, 0x52, 0x10, 0x0c, 0x12, 0x08, 0x0a, 0x04, 0x4a, 0x53, 0x4f, 0x4e,
	0x10, 0x5a, 0x22, 0xb0, 0x01, 0x0a, 0x07, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x26,
	0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x17, 0x0a, 0x07,
	0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70,
	0x65, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x0b, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x2e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x22, 0x58, 0x0a, 0x0c, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x50, 0x61, 0x69, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x72, 0x63, 0x5f, 0x6d, 0x75, 0x6c,
	0x74, 0x69, 0x61, 0x64, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x72,
	0x63, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x61, 0x64, 0x64, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x73,
	0x74, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x61, 0x64, 0x64, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x64, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x61, 0x64, 0x64, 0x72, 0x22,
	0x67, 0x0a, 0x07, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x12, 0x2c, 0x0a, 0x0a, 0x74, 0x72,
	0x61, 0x66, 0x66, 0x69, 0x63, 0x5f, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x70, 0x62, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x47, 0x61, 0x75, 0x67, 0x65, 0x52, 0x09, 0x74,
	0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x49, 0x6e, 0x12, 0x2e, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x66,
	0x66, 0x69, 0x63, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x70, 0x62, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x47, 0x61, 0x75, 0x67, 0x65, 0x52, 0x0a, 0x74, 0x72,
	0x61, 0x66, 0x66, 0x69, 0x63, 0x4f, 0x75, 0x74, 0x22, 0x51, 0x0a, 0x0a, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x49, 0x64, 0x73, 0x12, 0x24, 0x0a, 0x07, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x52, 0x07, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x22, 0xda, 0x05, 0x0a, 0x0a,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x65,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x65, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x09, 0x65, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x70, 0x62, 0x2e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x50, 0x61, 0x69, 0x72, 0x52,
	0x09, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x33, 0x0a, 0x08, 0x74, 0x69,
	0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70,
	0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12,
	0x1c, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x08, 0x2e,
	0x70, 0x62, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x25, 0x0a,
	0x07, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b,
	0x2e, 0x70, 0x62, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x52, 0x07, 0x74, 0x72, 0x61,
	0x66, 0x66, 0x69, 0x63, 0x12, 0x33, 0x0a, 0x07, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x52, 0x07, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x61, 0x74,
	0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6e, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6c,
	0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x4e, 0x73, 0x12, 0x28, 0x0a, 0x07, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x07, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x73, 0x12, 0x19, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x6e, 0x49, 0x64, 0x12, 0x24, 0x0a,
	0x04, 0x63, 0x6f, 0x6e, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62,
	0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x04, 0x63,
	0x6f, 0x6e, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x18, 0x63, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x10, 0x75, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x54, 0x61, 0x67,
	0x73, 0x1a, 0x5f, 0x0a, 0x08, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x17, 0x0a,
	0x07, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06,
	0x6f, 0x70, 0x65, 0x6e, 0x54, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64,
	0x65, 0x64, 0x5f, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x75, 0x70, 0x67,
	0x72, 0x61, 0x64, 0x65, 0x64, 0x54, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x6c, 0x6f, 0x73, 0x65,
	0x5f, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x63, 0x6c, 0x6f, 0x73, 0x65,
	0x54, 0x73, 0x1a, 0x4e, 0x0a, 0x0a, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x78, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x78,
	0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x0e, 0x0a, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x5f, 0x6f, 0x76,
	0x65, 0x72, 0x4a, 0x04, 0x08, 0x0c, 0x10, 0x10, 0x22, 0xe9, 0x03, 0x0a, 0x06, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12,
	0x1c, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x08, 0x2e,
	0x70, 0x62, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x25, 0x0a,
	0x07, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b,
	0x2e, 0x70, 0x62, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x52, 0x07, 0x74, 0x72, 0x61,
	0x66, 0x66, 0x69, 0x63, 0x12, 0x2c, 0x0a, 0x04, 0x63, 0x6f, 0x6e, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x52, 0x04, 0x63, 0x6f,
	0x6e, 0x6e, 0x12, 0x2f, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x12, 0x22, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x61, 0x74, 0x65, 0x6e,
	0x63, 0x79, 0x5f, 0x6e, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6c, 0x61, 0x74,
	0x65, 0x6e, 0x63, 0x79, 0x4e, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x18, 0x63, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x10, 0x75, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64,
	0x54, 0x61, 0x67, 0x73, 0x1a, 0x5e, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x66, 0x12, 0x24, 0x0a, 0x04, 0x63, 0x6f, 0x6e, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x04, 0x63, 0x6f, 0x6e, 0x6e, 0x12, 0x19, 0x0a, 0x07, 0x63,
	0x6f, 0x6e, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x06,
	0x63, 0x6f, 0x6e, 0x6e, 0x49, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x3e, 0x0a, 0x08, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x12, 0x17, 0x0a, 0x07, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x54, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x6c, 0x6f,
	0x73, 0x65, 0x5f, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x63, 0x6c, 0x6f,
	0x73, 0x65, 0x54, 0x73, 0x22, 0xe9, 0x05, 0x0a, 0x03, 0x44, 0x48, 0x54, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x73, 0x12, 0x26, 0x0a,
	0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x70, 0x62, 0x2e, 0x44, 0x48, 0x54, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x06, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x28, 0x0a, 0x07, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x48, 0x54, 0x2e,
	0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x07, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12,
	0x3d, 0x0a, 0x10, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x62, 0x2e, 0x44,
	0x48, 0x54, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x47, 0x61, 0x75, 0x67, 0x65, 0x52, 0x0f, 0x69,
	0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x51, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x3d,
	0x0a, 0x10, 0x6f, 0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x48,
	0x54, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x47, 0x61, 0x75, 0x67, 0x65, 0x52, 0x0f, 0x6f, 0x75,
	0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x51, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x1a, 0x67, 0x0a,
	0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x0c, 0x0a, 0x01, 0x6b, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x01, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x12, 0x25, 0x0a, 0x0e, 0x64,
	0x69, 0x73, 0x6a, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0d, 0x64, 0x69, 0x73, 0x6a, 0x6f, 0x69, 0x6e, 0x74, 0x50, 0x61, 0x74,
	0x68, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x65, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x04, 0x62, 0x65, 0x74, 0x61, 0x1a, 0xba, 0x01, 0x0a, 0x09, 0x50, 0x65, 0x65, 0x72, 0x49,
	0x6e, 0x44, 0x48, 0x54, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x65, 0x65, 0x72, 0x49, 0x64, 0x12, 0x30, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e,
	0x70, 0x62, 0x2e, 0x44, 0x48, 0x54, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x49, 0x6e, 0x44, 0x48, 0x54,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x22, 0x0a, 0x0d, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x42, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x22, 0x3e, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0a, 0x0a,
	0x06, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x49, 0x53,
	0x53, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54,
	0x45, 0x44, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x41, 0x4e, 0x44, 0x49, 0x44, 0x41, 0x54,
	0x45, 0x10, 0x03, 0x1a, 0x43, 0x0a, 0x06, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x63, 0x70, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x63, 0x70, 0x6c, 0x12,
	0x27, 0x0a, 0x05, 0x70, 0x65, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x70, 0x62, 0x2e, 0x44, 0x48, 0x54, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x49, 0x6e, 0x44, 0x48,
	0x54, 0x52, 0x05, 0x70, 0x65, 0x65, 0x72, 0x73, 0x1a, 0x56, 0x0a, 0x0a, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x47, 0x61, 0x75, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x22, 0x59, 0x0a, 0x0a, 0x53, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x30,
	0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x19, 0x0a, 0x03, 0x64, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e,
	0x70, 0x62, 0x2e, 0x44, 0x48, 0x54, 0x52, 0x03, 0x64, 0x68, 0x74, 0x22, 0xca, 0x01, 0x0a, 0x05,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x53,
	0x75, 0x62, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x0a, 0x73, 0x75, 0x62, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x25, 0x0a, 0x07, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x72, 0x61, 0x66,
	0x66, 0x69, 0x63, 0x52, 0x07, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x12, 0x1d, 0x0a, 0x0a,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x5f, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x54, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x22, 0x54, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x21, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x02, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x8f,
	0x02, 0x0a, 0x0d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x25, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x62, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x27, 0x0a, 0x07, 0x72, 0x75,
	0x6e, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x62,
	0x2e, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x07, 0x72, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x09, 0x2e, 0x70, 0x62, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52,
	0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52,
	0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x06, 0x6e, 0x6f, 0x74,
	0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x48, 0x00, 0x52, 0x06, 0x6e,
	0x6f, 0x74, 0x69, 0x63, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x22, 0x7c, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11,
	0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x4d,
	0x73, 0x12, 0x3b, 0x0a, 0x1a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x6d, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x17, 0x73, 0x74, 0x61, 0x74, 0x65, 0x53, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x4d, 0x73, 0x22, 0x80,
	0x03, 0x0a, 0x0d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x12, 0x25, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x62, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x33, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x30, 0x0a, 0x06,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x70,
	0x62, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x29,
	0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x2c, 0x0a, 0x06, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x54, 0x41, 0x54, 0x45, 0x10, 0x00, 0x12, 0x0b,
	0x0a, 0x07, 0x52, 0x55, 0x4e, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x45,
	0x56, 0x45, 0x4e, 0x54, 0x53, 0x10, 0x02, 0x22, 0x78, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x12, 0x09, 0x0a, 0x05, 0x48, 0x45, 0x4c, 0x4c, 0x4f, 0x10, 0x00, 0x12, 0x0b, 0x0a,
	0x07, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x55,
	0x53, 0x48, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x50,
	0x55, 0x53, 0x48, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x03, 0x12, 0x0e, 0x0a,
	0x0a, 0x50, 0x55, 0x53, 0x48, 0x5f, 0x50, 0x41, 0x55, 0x53, 0x45, 0x10, 0x04, 0x12, 0x0f, 0x0a,
	0x0b, 0x50, 0x55, 0x53, 0x48, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4d, 0x45, 0x10, 0x05, 0x12, 0x11,
	0x0a, 0x0d, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x10,
	0x07, 0x22, 0xc4, 0x01, 0x0a, 0x0f, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x32, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12,
	0x3c, 0x0a, 0x10, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x65, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x19, 0x0a,
	0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12,
	0x07, 0x0a, 0x03, 0x45, 0x52, 0x52, 0x10, 0x01, 0x22, 0x58, 0x0a, 0x0c, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x12, 0x29, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x2e, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x6b,
	0x69, 0x6e, 0x64, 0x22, 0x1d, 0x0a, 0x04, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x15, 0x0a, 0x11, 0x44,
	0x49, 0x53, 0x43, 0x41, 0x52, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x53,
	0x10, 0x00, 0x2a, 0x45, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0a, 0x0a, 0x06,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x4c, 0x4f, 0x53,
	0x45, 0x44, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x4f, 0x50, 0x45, 0x4e, 0x49, 0x4e, 0x47, 0x10,
	0x02, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x4c, 0x4f, 0x53, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x09,
	0x0a, 0x05, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x04, 0x2a, 0x24, 0x0a, 0x04, 0x52, 0x6f, 0x6c,
	0x65, 0x12, 0x0d, 0x0a, 0x09, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x54, 0x4f, 0x52, 0x10, 0x00,
	0x12, 0x0d, 0x0a, 0x09, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x44, 0x45, 0x52, 0x10, 0x01, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_rawDescOnce sync.Once
	file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_rawDescData = file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_rawDesc
)

func file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_rawDescGZIP() []byte {
	file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_rawDescOnce.Do(func() {
		file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_rawDescData = protoimpl.X.CompressGZIP(file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_rawDescData)
	})
	return file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_rawDescData
}

var file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_enumTypes = make([]protoimpl.EnumInfo, 8)
var file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_msgTypes = make([]protoimpl.MessageInfo, 29)
var file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_goTypes = []interface{}{
	(Status)(0), // 0: pb.Status
	(Role)(0),   // 1: pb.Role
	(EventType_EventProperty_PropertyType)(0), // 2: pb.EventType.EventProperty.PropertyType
	(DHT_PeerInDHT_Status)(0),                 // 3: pb.DHT.PeerInDHT.Status
	(ClientCommand_Source)(0),                 // 4: pb.ClientCommand.Source
	(ClientCommand_Command)(0),                // 5: pb.ClientCommand.Command
	(CommandResponse_Result)(0),               // 6: pb.CommandResponse.Result
	(ServerNotice_Kind)(0),                    // 7: pb.ServerNotice.Kind
	(*Version)(nil),                           // 8: pb.Version
	(*ResultCounter)(nil),                     // 9: pb.ResultCounter
	(*SlidingCounter)(nil),                    // 10: pb.SlidingCounter
	(*DataGauge)(nil),                         // 11: pb.DataGauge
	(*EventType)(nil),                         // 12: pb.EventType
	(*Runtime)(nil),                           // 13: pb.Runtime
	(*EndpointPair)(nil),                      // 14: pb.EndpointPair
	(*Traffic)(nil),                           // 15: pb.Traffic
	(*StreamList)(nil),                        // 16: pb.StreamList
	(*Connection)(nil),                        // 17: pb.Connection
	(*Stream)(nil),                            // 18: pb.Stream
	(*DHT)(nil),                               // 19: pb.DHT
	(*Subsystems)(nil),                        // 20: pb.Subsystems
	(*State)(nil),                             // 21: pb.State
	(*Event)(nil),                             // 22: pb.Event
	(*ServerMessage)(nil),                     // 23: pb.ServerMessage
	(*Configuration)(nil),                     // 24: pb.Configuration
	(*ClientCommand)(nil),                     // 25: pb.ClientCommand
	(*CommandResponse)(nil),                   // 26: pb.CommandResponse
	(*ServerNotice)(nil),                      // 27: pb.ServerNotice
	(*EventType_EventProperty)(nil),           // 28: pb.EventType.EventProperty
	(*Connection_Timeline)(nil),               // 29: pb.Connection.Timeline
	(*Connection_Attributes)(nil),             // 30: pb.Connection.Attributes
	(*Stream_ConnectionRef)(nil),              // 31: pb.Stream.ConnectionRef
	(*Stream_Timeline)(nil),                   // 32: pb.Stream.Timeline
	(*DHT_Params)(nil),                        // 33: pb.DHT.Params
	(*DHT_PeerInDHT)(nil),                     // 34: pb.DHT.PeerInDHT
	(*DHT_Bucket)(nil),                        // 35: pb.DHT.Bucket
	(*DHT_QueryGauge)(nil),                    // 36: pb.DHT.QueryGauge
}
var file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_depIdxs = []int32{
	28, // 0: pb.EventType.property_types:type_name -> pb.EventType.EventProperty
	12, // 1: pb.Runtime.event_types:type_name -> pb.EventType
	11, // 2: pb.Traffic.traffic_in:type_name -> pb.DataGauge
	11, // 3: pb.Traffic.traffic_out:type_name -> pb.DataGauge
	18, // 4: pb.StreamList.streams:type_name -> pb.Stream
	0,  // 5: pb.Connection.status:type_name -> pb.Status
	14, // 6: pb.Connection.endpoints:type_name -> pb.EndpointPair
	29, // 7: pb.Connection.timeline:type_name -> pb.Connection.Timeline
	1,  // 8: pb.Connection.role:type_name -> pb.Role
	15, // 9: pb.Connection.traffic:type_name -> pb.Traffic
	30, // 10: pb.Connection.attribs:type_name -> pb.Connection.Attributes
	16, // 11: pb.Connection.streams:type_name -> pb.StreamList
	17, // 12: pb.Connection.conn:type_name -> pb.Connection
	1,  // 13: pb.Stream.role:type_name -> pb.Role
	15, // 14: pb.Stream.traffic:type_name -> pb.Traffic
	31, // 15: pb.Stream.conn:type_name -> pb.Stream.ConnectionRef
	32, // 16: pb.Stream.timeline:type_name -> pb.Stream.Timeline
	0,  // 17: pb.Stream.status:type_name -> pb.Status
	33, // 18: pb.DHT.params:type_name -> pb.DHT.Params
	35, // 19: pb.DHT.buckets:type_name -> pb.DHT.Bucket
	36, // 20: pb.DHT.incoming_queries:type_name -> pb.DHT.QueryGauge
	36, // 21: pb.DHT.outgoing_queries:type_name -> pb.DHT.QueryGauge
	17, // 22: pb.Subsystems.connections:type_name -> pb.Connection
	19, // 23: pb.Subsystems.dht:type_name -> pb.DHT
	20, // 24: pb.State.subsystems:type_name -> pb.Subsystems
	15, // 25: pb.State.traffic:type_name -> pb.Traffic
	12, // 26: pb.Event.type:type_name -> pb.EventType
	8,  // 27: pb.ServerMessage.version:type_name -> pb.Version
	21, // 28: pb.ServerMessage.state:type_name -> pb.State
	13, // 29: pb.ServerMessage.runtime:type_name -> pb.Runtime
	22, // 30: pb.ServerMessage.event:type_name -> pb.Event
	26, // 31: pb.ServerMessage.response:type_name -> pb.CommandResponse
	27, // 32: pb.ServerMessage.notice:type_name -> pb.ServerNotice
	8,  // 33: pb.ClientCommand.version:type_name -> pb.Version
	5,  // 34: pb.ClientCommand.command:type_name -> pb.ClientCommand.Command
	4,  // 35: pb.ClientCommand.source:type_name -> pb.ClientCommand.Source
	24, // 36: pb.ClientCommand.config:type_name -> pb.Configuration
	6,  // 37: pb.CommandResponse.result:type_name -> pb.CommandResponse.Result
	24, // 38: pb.CommandResponse.effective_config:type_name -> pb.Configuration
	7,  // 39: pb.ServerNotice.kind:type_name -> pb.ServerNotice.Kind
	2,  // 40: pb.EventType.EventProperty.type:type_name -> pb.EventType.EventProperty.PropertyType
	17, // 41: pb.Stream.ConnectionRef.conn:type_name -> pb.Connection
	3,  // 42: pb.DHT.PeerInDHT.status:type_name -> pb.DHT.PeerInDHT.Status
	34, // 43: pb.DHT.Bucket.peers:type_name -> pb.DHT.PeerInDHT
	44, // [44:44] is the sub-list for method output_type
	44, // [44:44] is the sub-list for method input_type
	44, // [44:44] is the sub-list for extension type_name
	44, // [44:44] is the sub-list for extension extendee
	0,  // [0:44] is the sub-list for field type_name
}

func init() { file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_init() }
func file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_init() {
	if File_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Version); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResultCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SlidingCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataGauge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Runtime); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EndpointPair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Traffic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Connection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Stream); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DHT); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Subsystems); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Configuration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerNotice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventType_EventProperty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Connection_Timeline); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Connection_Attributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Stream_ConnectionRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Stream_Timeline); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DHT_Params); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DHT_PeerInDHT); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DHT_Bucket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DHT_QueryGauge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*Connection_ConnId)(nil),
		(*Connection_Conn)(nil),
	}
	file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_msgTypes[15].OneofWrappers = []interface{}{
		(*ServerMessage_State)(nil),
		(*ServerMessage_Runtime)(nil),
		(*ServerMessage_Event)(nil),
		(*ServerMessage_Response)(nil),
		(*ServerMessage_Notice)(nil),
	}
	file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_msgTypes[23].OneofWrappers = []interface{}{
		(*Stream_ConnectionRef_Conn)(nil),
		(*Stream_ConnectionRef_ConnId)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_rawDesc,
			NumEnums:      8,
			NumMessages:   29,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_goTypes,
		DependencyIndexes: file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_depIdxs,
		EnumInfos:         file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_enumTypes,
		MessageInfos:      file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_msgTypes,
	}.Build()
	File_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto = out.File
	file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_rawDesc = nil
	file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_goTypes = nil
	file_github_com_libp2p_go_libp2p_core_introspection_pb_introspection_proto_depIdxs = nil
}
