// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/libp2p/go-libp2p-core/peer/pb/peer_record.proto

package peer_pb

import (
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// PeerRecord messages contain information that is useful to share with other peers.
// Currently, a PeerRecord contains the public listen addresses for a peer, but this
// is expected to expand to include other information in the future.
//
// PeerRecords are designed to be serialized to bytes and placed inside of
// SignedEnvelopes before sharing with other peers.
// See https://github.com/libp2p/go-libp2p-core/record/pb/envelope.proto for
// the SignedEnvelope definition.
type PeerRecord struct {
	// peer_id contains a libp2p peer id in its binary representation.
	PeerId []byte `protobuf:"bytes,1,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
	// seq contains a monotonically-increasing sequence counter to order PeerRecords in time.
	Seq uint64 `protobuf:"varint,2,opt,name=seq,proto3" json:"seq,omitempty"`
	// addresses is a list of public listen addresses for the peer.
	Addresses            []*PeerRecord_AddressInfo `protobuf:"bytes,3,rep,name=addresses,proto3" json:"addresses,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *PeerRecord) Reset()         { *m = PeerRecord{} }
func (m *PeerRecord) String() string { return proto.CompactTextString(m) }
func (*PeerRecord) ProtoMessage()    {}
func (*PeerRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_6b5c02ceb2a5e26f, []int{0}
}

func (m *PeerRecord) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PeerRecord.Unmarshal(m, b)
}
func (m *PeerRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PeerRecord.Marshal(b, m, deterministic)
}
func (m *PeerRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PeerRecord.Merge(m, src)
}
func (m *PeerRecord) XXX_Size() int {
	return xxx_messageInfo_PeerRecord.Size(m)
}
func (m *PeerRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_PeerRecord.DiscardUnknown(m)
}

var xxx_messageInfo_PeerRecord proto.InternalMessageInfo

func (m *PeerRecord) GetPeerId() []byte {
	if m != nil {
		return m.PeerId
	}
	return nil
}

func (m *PeerRecord) GetSeq() uint64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *PeerRecord) GetAddresses() []*PeerRecord_AddressInfo {
	if m != nil {
		return m.Addresses
	}
	return nil
}

// AddressInfo is a wrapper around a binary multiaddr. It is defined as a
// separate message to allow us to add per-address metadata in the future.
type PeerRecord_AddressInfo struct {
	Multiaddr            []byte   `protobuf:"bytes,1,opt,name=multiaddr,proto3" json:"multiaddr,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PeerRecord_AddressInfo) Reset()         { *m = PeerRecord_AddressInfo{} }
func (m *PeerRecord_AddressInfo) String() string { return proto.CompactTextString(m) }
func (*PeerRecord_AddressInfo) ProtoMessage()    {}
func (*PeerRecord_AddressInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_6b5c02ceb2a5e26f, []int{0, 0}
}

func (m *PeerRecord_AddressInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PeerRecord_AddressInfo.Unmarshal(m, b)
}
func (m *PeerRecord_AddressInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PeerRecord_AddressInfo.Marshal(b, m, deterministic)
}
func (m *PeerRecord_AddressInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PeerRecord_AddressInfo.Merge(m, src)
}
func (m *PeerRecord_AddressInfo) XXX_Size() int {
	return xxx_messageInfo_PeerRecord_AddressInfo.Size(m)
}
func (m *PeerRecord_AddressInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PeerRecord_AddressInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PeerRecord_AddressInfo proto.InternalMessageInfo

func (m *PeerRecord_AddressInfo) GetMultiaddr() []byte {
	if m != nil {
		return m.Multiaddr
	}
	return nil
}

func init() {
	proto.RegisterType((*PeerRecord)(nil), "peer.pb.PeerRecord")
	proto.RegisterType((*PeerRecord_AddressInfo)(nil), "peer.pb.PeerRecord.AddressInfo")
}

func init() {
	proto.RegisterFile("github.com/libp2p/go-libp2p-core/peer/pb/peer_record.proto", fileDescriptor_6b5c02ceb2a5e26f)
}

var fileDescriptor_6b5c02ceb2a5e26f = []byte{
	// 195 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xb2, 0x4a, 0xcf, 0x2c, 0xc9,
	0x28, 0x4d, 0xd2, 0x4b, 0xce, 0xcf, 0xd5, 0xcf, 0xc9, 0x4c, 0x2a, 0x30, 0x2a, 0xd0, 0x4f, 0xcf,
	0xd7, 0x85, 0xb0, 0x74, 0x93, 0xf3, 0x8b, 0x52, 0xf5, 0x0b, 0x52, 0x53, 0x8b, 0xf4, 0x0b, 0x92,
	0xc0, 0x74, 0x7c, 0x51, 0x6a, 0x72, 0x7e, 0x51, 0x8a, 0x5e, 0x41, 0x51, 0x7e, 0x49, 0xbe, 0x10,
	0x3b, 0x48, 0x48, 0xaf, 0x20, 0x49, 0x69, 0x31, 0x23, 0x17, 0x57, 0x40, 0x6a, 0x6a, 0x51, 0x10,
	0x58, 0x56, 0x48, 0x9c, 0x0b, 0x2c, 0x13, 0x9f, 0x99, 0x22, 0xc1, 0xa8, 0xc0, 0xa8, 0xc1, 0x13,
	0xc4, 0x06, 0xe2, 0x7a, 0xa6, 0x08, 0x09, 0x70, 0x31, 0x17, 0xa7, 0x16, 0x4a, 0x30, 0x29, 0x30,
	0x6a, 0xb0, 0x04, 0x81, 0x98, 0x42, 0xb6, 0x5c, 0x9c, 0x89, 0x29, 0x29, 0x45, 0xa9, 0xc5, 0xc5,
	0xa9, 0xc5, 0x12, 0xcc, 0x0a, 0xcc, 0x1a, 0xdc, 0x46, 0xf2, 0x7a, 0x50, 0x63, 0xf5, 0x10, 0x46,
	0xea, 0x39, 0x42, 0x14, 0x79, 0xe6, 0xa5, 0xe5, 0x07, 0x21, 0x74, 0x48, 0x69, 0x73, 0x71, 0x23,
	0xc9, 0x08, 0xc9, 0x70, 0x71, 0xe6, 0x96, 0xe6, 0x94, 0x64, 0x82, 0x14, 0x40, 0xad, 0x46, 0x08,
	0x24, 0xb1, 0x81, 0x5d, 0x6d, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0x5c, 0x4c, 0x90, 0xb3, 0xf3,
	0x00, 0x00, 0x00,
}
