// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/libp2p/go-libp2p-core/record/pb/envelope.proto

package record_pb

import (
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"
	pb "github.com/libp2p/go-libp2p-core/crypto/pb"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Envelope encloses a signed payload produced by a peer, along with the public
// key of the keypair it was signed with so that it can be statelessly validated
// by the receiver.
//
// The payload is prefixed with a byte string that determines the type, so it
// can be deserialized deterministically. Often, this byte string is a
// multicodec.
type Envelope struct {
	// public_key is the public key of the keypair the enclosed payload was
	// signed with.
	PublicKey *pb.PublicKey `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	// payload_type encodes the type of payload, so that it can be deserialized
	// deterministically.
	PayloadType []byte `protobuf:"bytes,2,opt,name=payload_type,json=payloadType,proto3" json:"payload_type,omitempty"`
	// payload is the actual payload carried inside this envelope.
	Payload []byte `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
	// signature is the signature produced by the private key corresponding to
	// the enclosed public key, over the payload, prefixing a domain string for
	// additional security.
	Signature            []byte   `protobuf:"bytes,5,opt,name=signature,proto3" json:"signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Envelope) Reset()         { *m = Envelope{} }
func (m *Envelope) String() string { return proto.CompactTextString(m) }
func (*Envelope) ProtoMessage()    {}
func (*Envelope) Descriptor() ([]byte, []int) {
	return fileDescriptor_a1945edb55ce8ea6, []int{0}
}

func (m *Envelope) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Envelope.Unmarshal(m, b)
}
func (m *Envelope) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Envelope.Marshal(b, m, deterministic)
}
func (m *Envelope) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Envelope.Merge(m, src)
}
func (m *Envelope) XXX_Size() int {
	return xxx_messageInfo_Envelope.Size(m)
}
func (m *Envelope) XXX_DiscardUnknown() {
	xxx_messageInfo_Envelope.DiscardUnknown(m)
}

var xxx_messageInfo_Envelope proto.InternalMessageInfo

func (m *Envelope) GetPublicKey() *pb.PublicKey {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

func (m *Envelope) GetPayloadType() []byte {
	if m != nil {
		return m.PayloadType
	}
	return nil
}

func (m *Envelope) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *Envelope) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func init() {
	proto.RegisterType((*Envelope)(nil), "record.pb.Envelope")
}

func init() {
	proto.RegisterFile("github.com/libp2p/go-libp2p-core/record/pb/envelope.proto", fileDescriptor_a1945edb55ce8ea6)
}

var fileDescriptor_a1945edb55ce8ea6 = []byte{
	// 210 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x8e, 0xbf, 0x4a, 0xc5, 0x30,
	0x14, 0xc6, 0x89, 0xe2, 0x9f, 0xe6, 0xde, 0x29, 0x38, 0x04, 0x71, 0xb8, 0x3a, 0xdd, 0xa5, 0x09,
	0xb4, 0x83, 0xf8, 0x00, 0x4e, 0x2e, 0x52, 0xdc, 0x4b, 0x93, 0x1e, 0x6a, 0x30, 0xf6, 0x1c, 0x62,
	0x2a, 0xe4, 0x55, 0x7c, 0x5a, 0x31, 0x69, 0x71, 0xbc, 0xdb, 0xf7, 0x7d, 0xbf, 0xc3, 0x8f, 0xc3,
	0x9f, 0x26, 0x17, 0xdf, 0x17, 0xa3, 0x2c, 0x7e, 0x6a, 0xef, 0x0c, 0x35, 0xa4, 0x27, 0xac, 0x4b,
	0xaa, 0x2d, 0x06, 0xd0, 0x01, 0x2c, 0x86, 0x51, 0x93, 0xd1, 0x30, 0x7f, 0x83, 0x47, 0x02, 0x45,
	0x01, 0x23, 0x8a, 0xaa, 0x10, 0x45, 0xe6, 0xf6, 0xf1, 0xa4, 0xc5, 0x86, 0x44, 0x11, 0xff, 0x2c,
	0x25, 0x15, 0xc7, 0xc3, 0x0f, 0xe3, 0xd7, 0xcf, 0xab, 0x56, 0xb4, 0x9c, 0xd3, 0x62, 0xbc, 0xb3,
	0xfd, 0x07, 0x24, 0xc9, 0x0e, 0xec, 0xb8, 0x6b, 0x6e, 0xd4, 0x76, 0x6f, 0xd4, 0x6b, 0x86, 0x2f,
	0x90, 0xba, 0x8a, 0xb6, 0x28, 0xee, 0xf9, 0x9e, 0x86, 0xe4, 0x71, 0x18, 0xfb, 0x98, 0x08, 0xe4,
	0xd9, 0x81, 0x1d, 0xf7, 0xdd, 0x6e, 0xdd, 0xde, 0x12, 0x81, 0x90, 0xfc, 0x6a, 0xad, 0xf2, 0x3c,
	0xd3, 0xad, 0x8a, 0x3b, 0x5e, 0x7d, 0xb9, 0x69, 0x1e, 0xe2, 0x12, 0x40, 0x5e, 0x64, 0xf6, 0x3f,
	0x98, 0xcb, 0xfc, 0x63, 0xfb, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x00, 0x7a, 0xc3, 0x92, 0x24, 0x01,
	0x00, 0x00,
}
